'use strict';

angular.module('terminatorApp').controller('NewSingleProjectCtrl', function ($scope, $state, ProjectsSvc) {

	$scope.test = "The new single project ctrl is working!";

	$scope.newSingleProject = {
		setup: {
			type: "Single"
		}
	};

	$scope.addSingleProject = function (newSingleProject) {
		console.log("This is what I'm sending", newSingleProject);
		ProjectsSvc.postSingleProject(newSingleProject).then(function (results) {
			console.log("New Single Project added", results);
			$scope.templateID = results.data._id;
			console.log($scope.templateID);
			$state.go('dashboard.projectView', { id: results.data._id });
		}).catch(function (err) {
			console.log("Error", err);
		});
	};

	/////////////////////
	//Date Picker
	/////////////////////

	$scope.today = function () {
		$scope.dt = new Date();
	};
	$scope.today();

	$scope.clear = function () {
		$scope.dt = null;
	};

	// Disable weekend selection
	$scope.disabled = function (date, mode) {
		return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
	};

	$scope.toggleMin = function () {
		$scope.minDate = $scope.minDate ? null : new Date();
	};

	$scope.toggleMin();
	$scope.maxDate = new Date(2020, 5, 22);

	$scope.open1 = function (event) {
		console.log(event);
		$scope.popup1.opened = true;
	};

	$scope.open2 = function () {
		$scope.popup2.opened = true;
	};

	$scope.open3 = function () {
		$scope.popup3.opened = true;
	};

	$scope.setDate = function (year, month, day) {
		$scope.dt = new Date(year, month, day);
	};

	$scope.dateOptions = {
		formatYear: 'yy',
		startingDay: 1
	};

	$scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
	$scope.format = $scope.formats[0];
	$scope.altInputFormats = ['M!/d!/yyyy'];

	$scope.popup1 = {
		opened: false
	};

	$scope.popup2 = {
		opened: false
	};

	$scope.popup3 = {
		opened: false
	};

	var tomorrow = new Date();
	tomorrow.setDate(tomorrow.getDate() + 1);
	var afterTomorrow = new Date();
	afterTomorrow.setDate(tomorrow.getDate() + 1);
	$scope.events = [{
		date: tomorrow,
		status: 'full'
	}, {
		date: afterTomorrow,
		status: 'partially'
	}];

	$scope.getDayClass = function (date, mode) {
		if (mode === 'day') {
			var dayToCheck = new Date(date).setHours(0, 0, 0, 0);

			for (var i = 0; i < $scope.events.length; i++) {
				var currentDay = new Date($scope.events[i].date).setHours(0, 0, 0, 0);

				if (dayToCheck === currentDay) {
					return $scope.events[i].status;
				}
			}
		}

		return '';
	};
});
//# sourceMappingURL=data:application/json;base64,

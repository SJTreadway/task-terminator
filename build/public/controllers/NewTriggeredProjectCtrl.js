'use strict';

angular.module('terminatorApp').controller('NewTriggeredProjectCtrl', function ($scope, ProjectsSvc, $state) {

	$scope.newTriggeredForm = {
		setup: {
			type: "Triggered"
		}
	};

	$scope.selectedAssign = '';

	$scope.addTriggeredTemplate = function (newTriggeredForm) {
		if (newTriggeredForm.name === undefined) {
			alert('Please enter a project name.');
		} else {
			ProjectsSvc.postTriggeredTemplate(newTriggeredForm).then(function (results) {
				console.log("New Triggered Template added", results);
				$state.go('dashboard.templateView', { id: results._id });
			}).catch(function (err) {
				// $scope.alerts.push({msg: "Failed to Create Project", type: "danger"});
				console.log("Error", err);
			});
		}
	};

	$scope.newTasksArr = [];

	$scope.newTask = {
		name: '',
		description: '',
		assignment: {
			departments: '',
			positions: '',
			employees: ''
		}
	};

	$scope.saveTask = function (newTask) {
		newTask.associatedTemplate = $scope.templateID;
		console.log(newTask);
		if (newTask.assignment.departments) newTask.assignment.departments = newTask.assignment.departments._id;
		if (newTask.assignment.positions) newTask.assignment.positions = newTask.assignment.positions._id;
		if (newTask.assignment.employees) newTask.assignment.employee = newTask.assignment.employee._id;
		$scope.newTasksArr.push(newTask);
		console.log("newTasksArr", $scope.newTasksArr);
		$scope.newTask = {
			name: '',
			description: '',
			assignment: {
				departments: '',
				positions: '',
				employees: ''
			}
		};
		// $scope.selectedAssign = null; tryig to clear drop downs with this.
	};

	$scope.addTasks = function (newTasksArr) {
		ProjectsSvc.postTasks(newTasksArr, $scope.templateID).then(function (results) {
			console.log("Tasks added successfully", results);
			// $state.go('projects');
		});
		$scope.newTasksArr = [];
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9jb250cm9sbGVycy9OZXdUcmlnZ2VyZWRQcm9qZWN0Q3RybC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLFFBQVEsTUFBUixDQUFlLGVBQWYsRUFBZ0MsVUFBaEMsQ0FBMkMseUJBQTNDLEVBQXNFLFVBQVMsTUFBVCxFQUFpQixXQUFqQixFQUE4QixNQUE5QixFQUFzQzs7QUFFekcsUUFBTyxnQkFBUCxHQUEwQjtBQUMzQixTQUFPO0FBQ04sU0FBTSxXQUFOO0dBREQ7RUFEQyxDQUZ5Rzs7QUFRekcsUUFBTyxjQUFQLEdBQXdCLEVBQXhCLENBUnlHOztBQVV6RyxRQUFPLG9CQUFQLEdBQThCLFVBQVUsZ0JBQVYsRUFBNEI7QUFDckQsTUFBSSxpQkFBaUIsSUFBakIsS0FBd0IsU0FBeEIsRUFBbUM7QUFDbkMsU0FBTSw4QkFBTixFQURtQztHQUF2QyxNQUVPO0FBQ0gsZUFBWSxxQkFBWixDQUFrQyxnQkFBbEMsRUFBb0QsSUFBcEQsQ0FBeUQsVUFBUyxPQUFULEVBQWtCO0FBQ3pFLFlBQVEsR0FBUixDQUFZLDhCQUFaLEVBQTRDLE9BQTVDLEVBRHlFO0FBRXpFLFdBQU8sRUFBUCxDQUFVLHdCQUFWLEVBQW9DLEVBQUMsSUFBSSxRQUFRLEdBQVIsRUFBekMsRUFGeUU7SUFBbEIsQ0FBekQsQ0FHRyxLQUhILENBR1MsVUFBUyxHQUFULEVBQWM7O0FBRXJCLFlBQVEsR0FBUixDQUFZLE9BQVosRUFBcUIsR0FBckIsRUFGcUI7SUFBZCxDQUhULENBREc7R0FGUDtFQUR5QixDQVYyRTs7QUF3QjNHLFFBQU8sV0FBUCxHQUFxQixFQUFyQixDQXhCMkc7O0FBMEIzRyxRQUFPLE9BQVAsR0FBaUI7QUFDWCxRQUFNLEVBQU47QUFDQSxlQUFhLEVBQWI7QUFDQSxjQUFZO0FBQ1YsZ0JBQWEsRUFBYjtBQUNBLGNBQVcsRUFBWDtBQUNBLGNBQVcsRUFBWDtHQUhGO0VBSE4sQ0ExQjJHOztBQW9DekcsUUFBTyxRQUFQLEdBQWtCLFVBQVMsT0FBVCxFQUFrQjtBQUNsQyxVQUFRLGtCQUFSLEdBQTZCLE9BQU8sVUFBUCxDQURLO0FBRWxDLFVBQVEsR0FBUixDQUFZLE9BQVosRUFGa0M7QUFHbEMsTUFBRyxRQUFRLFVBQVIsQ0FBbUIsV0FBbkIsRUFBZ0MsUUFBUSxVQUFSLENBQW1CLFdBQW5CLEdBQWlDLFFBQVEsVUFBUixDQUFtQixXQUFuQixDQUErQixHQUEvQixDQUFwRTtBQUNBLE1BQUcsUUFBUSxVQUFSLENBQW1CLFNBQW5CLEVBQThCLFFBQVEsVUFBUixDQUFtQixTQUFuQixHQUErQixRQUFRLFVBQVIsQ0FBbUIsU0FBbkIsQ0FBNkIsR0FBN0IsQ0FBaEU7QUFDQSxNQUFHLFFBQVEsVUFBUixDQUFtQixTQUFuQixFQUE4QixRQUFRLFVBQVIsQ0FBbUIsUUFBbkIsR0FBOEIsUUFBUSxVQUFSLENBQW1CLFFBQW5CLENBQTRCLEdBQTVCLENBQS9EO0FBQ0EsU0FBTyxXQUFQLENBQW1CLElBQW5CLENBQXdCLE9BQXhCLEVBTmtDO0FBT2xDLFVBQVEsR0FBUixDQUFZLGFBQVosRUFBMkIsT0FBTyxXQUFQLENBQTNCLENBUGtDO0FBUWxDLFNBQU8sT0FBUCxHQUFpQjtBQUNmLFNBQU0sRUFBTjtBQUNBLGdCQUFhLEVBQWI7QUFDQSxlQUFZO0FBQ1YsaUJBQWEsRUFBYjtBQUNBLGVBQVcsRUFBWDtBQUNBLGVBQVcsRUFBWDtJQUhGO0dBSEY7O0FBUmtDLEVBQWxCLENBcEN1Rjs7QUF3RHpHLFFBQU8sUUFBUCxHQUFrQixVQUFTLFdBQVQsRUFBc0I7QUFDdEMsY0FBWSxTQUFaLENBQXNCLFdBQXRCLEVBQW1DLE9BQU8sVUFBUCxDQUFuQyxDQUFzRCxJQUF0RCxDQUEyRCxVQUFTLE9BQVQsRUFBa0I7QUFDM0UsV0FBUSxHQUFSLENBQVksMEJBQVosRUFBd0MsT0FBeEM7O0FBRDJFLEdBQWxCLENBQTNELENBRHNDO0FBS3RDLFNBQU8sV0FBUCxHQUFxQixFQUFyQixDQUxzQztFQUF0QixDQXhEdUY7Q0FBdEMsQ0FBdEUiLCJmaWxlIjoicHVibGljL2NvbnRyb2xsZXJzL05ld1RyaWdnZXJlZFByb2plY3RDdHJsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3Rlcm1pbmF0b3JBcHAnKS5jb250cm9sbGVyKCdOZXdUcmlnZ2VyZWRQcm9qZWN0Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgUHJvamVjdHNTdmMsICRzdGF0ZSkge1xyXG5cclxuICBcdCRzY29wZS5uZXdUcmlnZ2VyZWRGb3JtID0ge1xyXG5cdFx0c2V0dXA6IHtcclxuXHRcdFx0dHlwZTogXCJUcmlnZ2VyZWRcIlxyXG5cdFx0fVxyXG5cdH07XHJcbiAgICBcclxuICBcdCRzY29wZS5zZWxlY3RlZEFzc2lnbiA9ICcnO1xyXG5cclxuICBcdCRzY29wZS5hZGRUcmlnZ2VyZWRUZW1wbGF0ZSA9IGZ1bmN0aW9uIChuZXdUcmlnZ2VyZWRGb3JtKSB7XHJcbiAgICAgICAgaWYgKG5ld1RyaWdnZXJlZEZvcm0ubmFtZT09PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBhbGVydCgnUGxlYXNlIGVudGVyIGEgcHJvamVjdCBuYW1lLicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIFByb2plY3RzU3ZjLnBvc3RUcmlnZ2VyZWRUZW1wbGF0ZShuZXdUcmlnZ2VyZWRGb3JtKS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5ldyBUcmlnZ2VyZWQgVGVtcGxhdGUgYWRkZWRcIiwgcmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgJHN0YXRlLmdvKCdkYXNoYm9hcmQudGVtcGxhdGVWaWV3Jywge2lkOiByZXN1bHRzLl9pZH0pO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAvLyAkc2NvcGUuYWxlcnRzLnB1c2goe21zZzogXCJGYWlsZWQgdG8gQ3JlYXRlIFByb2plY3RcIiwgdHlwZTogXCJkYW5nZXJcIn0pO1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3JcIiwgZXJyKTtcclxuICAgICAgICAgICAgfSk7ICAgICAgICBcclxuICAgICAgICB9XHJcblx0fTtcclxuXHJcblx0JHNjb3BlLm5ld1Rhc2tzQXJyID0gW107XHJcblxyXG5cdCRzY29wZS5uZXdUYXNrID0ge1xyXG5cdCAgICAgIG5hbWU6ICcnLFxyXG5cdCAgICAgIGRlc2NyaXB0aW9uOiAnJyxcclxuXHQgICAgICBhc3NpZ25tZW50OiB7XHJcblx0ICAgICAgICBkZXBhcnRtZW50czogJycsXHJcblx0ICAgICAgICBwb3NpdGlvbnM6ICcnLFxyXG5cdCAgICAgICAgZW1wbG95ZWVzOiAnJ1xyXG5cdCAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcbiAgXHQkc2NvcGUuc2F2ZVRhc2sgPSBmdW5jdGlvbihuZXdUYXNrKSB7XHJcblx0ICAgIG5ld1Rhc2suYXNzb2NpYXRlZFRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlSUQ7XHJcblx0ICAgIGNvbnNvbGUubG9nKG5ld1Rhc2spO1xyXG5cdCAgICBpZihuZXdUYXNrLmFzc2lnbm1lbnQuZGVwYXJ0bWVudHMpIG5ld1Rhc2suYXNzaWdubWVudC5kZXBhcnRtZW50cyA9IG5ld1Rhc2suYXNzaWdubWVudC5kZXBhcnRtZW50cy5faWQ7XHJcblx0ICAgIGlmKG5ld1Rhc2suYXNzaWdubWVudC5wb3NpdGlvbnMpIG5ld1Rhc2suYXNzaWdubWVudC5wb3NpdGlvbnMgPSBuZXdUYXNrLmFzc2lnbm1lbnQucG9zaXRpb25zLl9pZDtcclxuXHQgICAgaWYobmV3VGFzay5hc3NpZ25tZW50LmVtcGxveWVlcykgbmV3VGFzay5hc3NpZ25tZW50LmVtcGxveWVlID0gbmV3VGFzay5hc3NpZ25tZW50LmVtcGxveWVlLl9pZDtcclxuXHQgICAgJHNjb3BlLm5ld1Rhc2tzQXJyLnB1c2gobmV3VGFzayk7XHJcblx0ICAgIGNvbnNvbGUubG9nKFwibmV3VGFza3NBcnJcIiwgJHNjb3BlLm5ld1Rhc2tzQXJyKTtcclxuXHQgICAgJHNjb3BlLm5ld1Rhc2sgPSB7XHJcblx0ICAgICAgbmFtZTogJycsXHJcblx0ICAgICAgZGVzY3JpcHRpb246ICcnLFxyXG5cdCAgICAgIGFzc2lnbm1lbnQ6IHtcclxuXHQgICAgICAgIGRlcGFydG1lbnRzOiAnJyxcclxuXHQgICAgICAgIHBvc2l0aW9uczogJycsXHJcblx0ICAgICAgICBlbXBsb3llZXM6ICcnXHJcblx0ICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICAvLyAkc2NvcGUuc2VsZWN0ZWRBc3NpZ24gPSBudWxsOyB0cnlpZyB0byBjbGVhciBkcm9wIGRvd25zIHdpdGggdGhpcy5cclxuICBcdH07XHJcblxyXG4gIFx0JHNjb3BlLmFkZFRhc2tzID0gZnVuY3Rpb24obmV3VGFza3NBcnIpIHtcclxuXHQgICAgUHJvamVjdHNTdmMucG9zdFRhc2tzKG5ld1Rhc2tzQXJyLCAkc2NvcGUudGVtcGxhdGVJRCkudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XHJcblx0ICAgICAgY29uc29sZS5sb2coXCJUYXNrcyBhZGRlZCBzdWNjZXNzZnVsbHlcIiwgcmVzdWx0cyk7XHJcblx0ICAgICAgLy8gJHN0YXRlLmdvKCdwcm9qZWN0cycpO1xyXG5cdCAgICB9KTtcclxuXHQgICAgJHNjb3BlLm5ld1Rhc2tzQXJyID0gW107XHJcbiAgXHR9O1xyXG5cclxufSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

'use strict';

var mongoose = require('mongoose');
var Project = require('../models/Project.js');
var ProjectTask = require('../models/ProjectTask.js');
var Template = require('../models/Template');
var TemplateTask = require('../models/TemplateTask.js');
var timeCtrl = require('../controllers/timeCtrl');
var helpers = require('../controllers/projectHelpers');
var _ = require('underscore');
var Q = require('q');
var randomstring = require('randomstring');
var Employee = require('../models/Employee.js');

module.exports = {
  endpointProject: function endpointProject(req, res) {
    var templateId = req.params.templateid;
    var instance = req.body.instance;
    var description = req.body.description;
    module.exports.newProject(templateId, description, instance).then(function (project) {
      return res.json(project);
    });
  },
  newProject: function newProject(templateId, description, instance) {
    console.log("#1 - New Project Function Called");
    var deferred = Q.defer();
    var associatedProjectId;
    var newProject;
    helpers.makeProjectObject(templateId).then(function (cleanObject) {
      console.log("#3 - Make Project Object Returned: ", cleanObject);
      newProject = new Project(cleanObject);
      newProject.friendlyId = randomstring.generate({ length: 5, readable: true });
      console.log("#4 - New Project Id : ", newProject._id);
      associatedProjectId = newProject._id;
      console.log("#5 - associatedProjectId :", associatedProjectId);
      return helpers.nextOccurrence(cleanObject, instance);
    }).then(function (deadline) {
      console.log("#14 - Next Occurance Returned: ", deadline);
      newProject.setup.dueDate.actual = deadline;
      console.log("#15 - New Project Deadline Set : ", newProject.setup.dueDate.actual);
      return helpers.getTaskArray(templateId);
    }).then(function (arrayofIds) {
      console.log("#17 - Returned From Task Array Helper ", arrayofIds);
      //for every id, make a new project task
      var new_tasks_promises = _.map(arrayofIds, function (id) {
        console.log("Array of Ids ID ", id);
        return helpers.makeTemplateTaskObject(id, associatedProjectId);
      });
      //new_tasks_promises now contains an array of promises which will be resolved as each of the tasks are created
      console.log("#19 - Array of New Task Promises", new_tasks_promises);
      return Q.all(new_tasks_promises);
    }).then(function (clean_objects) {
      console.log("#20 - Array of New Task Objects", clean_objects);
      return Q.all(_.map(clean_objects, function (clean_object) {
        return helpers.makeProjectTask(clean_object, associatedProjectId);
      }));
    }).then(function (project_tasks) {
      console.log("#22 - Project Tasks", project_tasks);
      //take tasks, put in Project, save
      newProject.description = description;
      for (var i = 0; i < project_tasks.length; i++) {
        newProject.tasks.push(project_tasks[i]);
      }
      newProject.setup.associatedTemplate = templateId;
      newProject.save().then(function (project) {
        console.log("Made it!");
        deferred.resolve(project);
      });
    });
    return deferred.promise;
  },
  newSingleProject: function newSingleProject(req, res) {
    var newProject = new Project(req.body);
    newProject.friendlyId = randomstring.generate({ length: 5, readable: true });
    newProject.save().then(function (project) {
      return res.json(project);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  newTriggeredProject: function newTriggeredProject(req, res) {
    console.log("#1 - New Project Function Called");
    var templateId = req.params.templateid;
    var instance = req.body.instance;
    var description = req.body.description;
    var associatedProjectId;
    var newProject;
    helpers.makeProjectObject(templateId).then(function (cleanObject) {
      console.log("#3 - Make Project Object Returned: ", cleanObject);
      newProject = new Project(cleanObject);
      newProject.friendlyId = randomstring.generate({ length: 5, readable: true });
      console.log("#4 - New Project Id : ", newProject._id);
      associatedProjectId = newProject._id;
      console.log("#5 - associatedProjectId :", associatedProjectId);
      return timeCtrl.triggeredProjectDeadline();
    }).then(function (deadline) {
      console.log("#14 - Next Occurance Returned: ", deadline);
      newProject.setup.dueDate.actual = deadline;
      console.log("#15 - New Project Deadline Set : ", newProject.setup.dueDate.actual);
      return helpers.getTaskArray(templateId);
    }).then(function (arrayofIds) {
      console.log("#17 - Returned From Task Array Helper ", arrayofIds);
      //for every id, make a new project task
      var new_tasks_promises = _.map(arrayofIds, function (id) {
        console.log("Array of Ids ID ", id);
        return helpers.makeTemplateTaskObject(id, associatedProjectId);
      });
      //new_tasks_promises now contains an array of promises which will be resolved as each of the tasks are created
      console.log("#19 - Array of New Task Promises", new_tasks_promises);
      return Q.all(new_tasks_promises);
    }).then(function (clean_objects) {
      console.log("#20 - Array of New Task Objects", clean_objects);
      return Q.all(_.map(clean_objects, function (clean_object) {
        return helpers.makeProjectTask(clean_object, associatedProjectId);
      }));
    }).then(function (project_tasks) {
      console.log("#22 - Project Tasks", project_tasks);
      //take tasks, put in Project, save
      newProject.description = description;
      for (var i = 0; i < project_tasks.length; i++) {
        newProject.tasks.push(project_tasks[i]);
      }
      newProject.save().then(function (project) {
        console.log("Made it!");
        return res.json(project);
      });
    });
  },
  oneProject: function oneProject(req, res) {
    var templateOptions = {
      path: 'tasks',
      model: 'ProjectTask',
      populate: {
        path: "assignment.employees",
        model: "Employee",
        select: "identification.name.fullName"
      }
    };
    Project.findById(req.params.id).populate(templateOptions).exec().then(function (result) {
      return res.json(result);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  editProject: function editProject(req, res) {
    Project.update({ _id: req.params.id }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  deleteProject: function deleteProject(req, res) {
    Project.remove({ _id: req.params.id }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  allProjects: function allProjects(req, res) {
    Project.find().populate('tasks').exec().then(function (result) {
      return res.json(result);
    }).catch(function (err) {
      return res.status(500).end();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,

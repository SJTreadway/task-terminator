'use strict';

var mongoose = require('mongoose');
var Position = require('../models/Position.js');
var Company = require('../models/Company.js');
var Department = require('../models/Department.js');

module.exports = {
  newPosition: function newPosition(req, res) {
    var newPosition = new Position(req.body);
    Company.findOne({
      _id: req.params.companyid
    }).exec().then(function (result) {
      result.positions.push(newPosition._id);
      result.save();
    });

    Department.findOne({
      "name": "All"
    }).exec().then(function (result) {
      result.positions.push(newPosition._id);
      result.save();
    });

    Department.findOne({
      _id: req.params.departmentid
    }).exec().then(function (result) {
      // console.log("DEPARTMENT", result);
      result.positions.push(newPosition._id);
      result.save();
    });
    newPosition.company = req.params.companyid;
    newPosition.department = req.params.departmentid;
    newPosition.save().then(function (result) {
      return res.json(result);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  onePosition: function onePosition(req, res) {
    Position.findById(req.params.id).exec().then(function (position) {
      return res.json(position);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  editPosition: function editPosition(req, res) {
    Position.update({
      _id: req.params.id
    }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  deletePosition: function deletePosition(req, res) {
    Position.remove({
      _id: req.params.id
    }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  allPositions: function allPositions(req, res) {
    Position.find().exec().then(function (positions) {
      return res.json(positions);
    }).catch(function (err) {
      return res.status(500).end();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlcl9hc3NldHMvY29udHJvbGxlcnMvcG9zaXRpb25DdHJsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxXQUFXLFFBQVEsVUFBUixDQUFYO0FBQ04sSUFBTSxXQUFXLFFBQVEsdUJBQVIsQ0FBWDtBQUNOLElBQU0sVUFBVSxRQUFRLHNCQUFSLENBQVY7QUFDTixJQUFNLGFBQWEsUUFBUSx5QkFBUixDQUFiOztBQUVOLE9BQU8sT0FBUCxHQUFpQjtBQUVmLG9DQUFZLEtBQUssS0FBSztBQUNsQixRQUFNLGNBQWMsSUFBSSxRQUFKLENBQWEsSUFBSSxJQUFKLENBQTNCLENBRFk7QUFFbEIsWUFDRyxPQURILENBQ1c7QUFDUCxXQUFLLElBQUksTUFBSixDQUFXLFNBQVg7S0FGVCxFQUlHLElBSkgsR0FLRyxJQUxILENBS1EsVUFBUyxNQUFULEVBQWlCO0FBQ3JCLGFBQU8sU0FBUCxDQUFpQixJQUFqQixDQUFzQixZQUFZLEdBQVosQ0FBdEIsQ0FEcUI7QUFFckIsYUFBTyxJQUFQLEdBRnFCO0tBQWpCLENBTFIsQ0FGa0I7O0FBWWxCLGVBQ0csT0FESCxDQUNXO0FBQ1AsY0FBUSxLQUFSO0tBRkosRUFJRyxJQUpILEdBS0csSUFMSCxDQUtRLFVBQUMsTUFBRCxFQUFXO0FBQ2YsYUFBTyxTQUFQLENBQWlCLElBQWpCLENBQXNCLFlBQVksR0FBWixDQUF0QixDQURlO0FBRWYsYUFBTyxJQUFQLEdBRmU7S0FBWCxDQUxSLENBWmtCOztBQXNCbEIsZUFDRyxPQURILENBQ1c7QUFDUCxXQUFLLElBQUksTUFBSixDQUFXLFlBQVg7S0FGVCxFQUdLLElBSEwsR0FHWSxJQUhaLENBR2lCLFVBQUMsTUFBRCxFQUFZOztBQUV6QixhQUFPLFNBQVAsQ0FBaUIsSUFBakIsQ0FBc0IsWUFBWSxHQUFaLENBQXRCLENBRnlCO0FBR3pCLGFBQU8sSUFBUCxHQUh5QjtLQUFaLENBSGpCLENBdEJrQjtBQThCbEIsZ0JBQVksT0FBWixHQUFzQixJQUFJLE1BQUosQ0FBVyxTQUFYLENBOUJKO0FBK0JsQixnQkFBWSxVQUFaLEdBQXlCLElBQUksTUFBSixDQUFXLFlBQVgsQ0EvQlA7QUFnQ2xCLGdCQUFZLElBQVosR0FBbUIsSUFBbkIsQ0FBd0IsVUFBQyxNQUFELEVBQVk7QUFDbEMsYUFBTyxJQUFJLElBQUosQ0FBUyxNQUFULENBQVAsQ0FEa0M7S0FBWixDQUF4QixDQUVHLEtBRkgsQ0FFUyxVQUFDLEdBQUQsRUFBUztBQUNoQixhQUFPLElBQUksTUFBSixDQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBUCxDQURnQjtLQUFULENBRlQsQ0FoQ2tCO0dBRlA7QUF5Q2Isb0NBQVksS0FBSyxLQUFLO0FBQ3BCLGFBQVMsUUFBVCxDQUFrQixJQUFJLE1BQUosQ0FBVyxFQUFYLENBQWxCLENBQWlDLElBQWpDLEdBQXdDLElBQXhDLENBQTZDLFVBQUMsUUFBRCxFQUFjO0FBQ3pELGFBQU8sSUFBSSxJQUFKLENBQVMsUUFBVCxDQUFQLENBRHlEO0tBQWQsQ0FBN0MsQ0FFRyxLQUZILENBRVMsVUFBQyxHQUFELEVBQVM7QUFDaEIsYUFBTyxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQVAsQ0FEZ0I7S0FBVCxDQUZULENBRG9CO0dBekNUO0FBaURiLHNDQUFhLEtBQUssS0FBSztBQUNyQixhQUFTLE1BQVQsQ0FBZ0I7QUFDZCxXQUFLLElBQUksTUFBSixDQUFXLEVBQVg7S0FEUCxFQUVHLElBQUksSUFBSixDQUZILENBRWEsSUFGYixDQUVrQixZQUFNO0FBQ3RCLGFBQU8sSUFBSSxNQUFKLENBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFQLENBRHNCO0tBQU4sQ0FGbEIsQ0FJRyxLQUpILENBSVMsVUFBQyxHQUFELEVBQVM7QUFDaEIsYUFBTyxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQVAsQ0FEZ0I7S0FBVCxDQUpULENBRHFCO0dBakRWO0FBMkRiLDBDQUFlLEtBQUssS0FBSztBQUN2QixhQUFTLE1BQVQsQ0FBZ0I7QUFDZCxXQUFLLElBQUksTUFBSixDQUFXLEVBQVg7S0FEUCxFQUVHLElBQUksSUFBSixDQUZILENBRWEsSUFGYixDQUVrQixZQUFNO0FBQ3RCLGFBQU8sSUFBSSxNQUFKLENBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFQLENBRHNCO0tBQU4sQ0FGbEIsQ0FJRyxLQUpILENBSVMsVUFBQyxHQUFELEVBQVM7QUFDaEIsYUFBTyxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQVAsQ0FEZ0I7S0FBVCxDQUpULENBRHVCO0dBM0RaO0FBcUViLHNDQUFhLEtBQUssS0FBSztBQUNyQixhQUFTLElBQVQsR0FBZ0IsSUFBaEIsR0FBdUIsSUFBdkIsQ0FBNEIsVUFBQyxTQUFELEVBQWU7QUFDekMsYUFBTyxJQUFJLElBQUosQ0FBUyxTQUFULENBQVAsQ0FEeUM7S0FBZixDQUE1QixDQUVHLEtBRkgsQ0FFUyxVQUFDLEdBQUQsRUFBUztBQUNoQixhQUFPLElBQUksTUFBSixDQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBUCxDQURnQjtLQUFULENBRlQsQ0FEcUI7R0FyRVY7Q0FBakIiLCJmaWxlIjoic2VydmVyX2Fzc2V0cy9jb250cm9sbGVycy9wb3NpdGlvbkN0cmwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XHJcbmNvbnN0IFBvc2l0aW9uID0gcmVxdWlyZSgnLi4vbW9kZWxzL1Bvc2l0aW9uLmpzJyk7XHJcbmNvbnN0IENvbXBhbnkgPSByZXF1aXJlKCcuLi9tb2RlbHMvQ29tcGFueS5qcycpO1xyXG5jb25zdCBEZXBhcnRtZW50ID0gcmVxdWlyZSgnLi4vbW9kZWxzL0RlcGFydG1lbnQuanMnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICBuZXdQb3NpdGlvbihyZXEsIHJlcykge1xyXG4gICAgICBjb25zdCBuZXdQb3NpdGlvbiA9IG5ldyBQb3NpdGlvbihyZXEuYm9keSk7XHJcbiAgICAgIENvbXBhbnlcclxuICAgICAgICAuZmluZE9uZSh7XHJcbiAgICAgICAgICBfaWQ6IHJlcS5wYXJhbXMuY29tcGFueWlkXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZXhlYygpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICByZXN1bHQucG9zaXRpb25zLnB1c2gobmV3UG9zaXRpb24uX2lkKTtcclxuICAgICAgICAgIHJlc3VsdC5zYXZlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICBEZXBhcnRtZW50XHJcbiAgICAgICAgLmZpbmRPbmUoe1xyXG4gICAgICAgICAgXCJuYW1lXCI6IFwiQWxsXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5leGVjKClcclxuICAgICAgICAudGhlbigocmVzdWx0KSA9PntcclxuICAgICAgICAgIHJlc3VsdC5wb3NpdGlvbnMucHVzaChuZXdQb3NpdGlvbi5faWQpO1xyXG4gICAgICAgICAgcmVzdWx0LnNhdmUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIERlcGFydG1lbnRcclxuICAgICAgICAuZmluZE9uZSh7XHJcbiAgICAgICAgICBfaWQ6IHJlcS5wYXJhbXMuZGVwYXJ0bWVudGlkXHJcbiAgICAgICAgfSkuZXhlYygpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJERVBBUlRNRU5UXCIsIHJlc3VsdCk7XHJcbiAgICAgICAgICByZXN1bHQucG9zaXRpb25zLnB1c2gobmV3UG9zaXRpb24uX2lkKTtcclxuICAgICAgICAgIHJlc3VsdC5zYXZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIG5ld1Bvc2l0aW9uLmNvbXBhbnkgPSByZXEucGFyYW1zLmNvbXBhbnlpZDtcclxuICAgICAgbmV3UG9zaXRpb24uZGVwYXJ0bWVudCA9IHJlcS5wYXJhbXMuZGVwYXJ0bWVudGlkO1xyXG4gICAgICBuZXdQb3NpdGlvbi5zYXZlKCkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHJlc3VsdCk7XHJcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgb25lUG9zaXRpb24ocmVxLCByZXMpIHtcclxuICAgICAgUG9zaXRpb24uZmluZEJ5SWQocmVxLnBhcmFtcy5pZCkuZXhlYygpLnRoZW4oKHBvc2l0aW9uKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHBvc2l0aW9uKTtcclxuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBlZGl0UG9zaXRpb24ocmVxLCByZXMpIHtcclxuICAgICAgUG9zaXRpb24udXBkYXRlKHtcclxuICAgICAgICBfaWQ6IHJlcS5wYXJhbXMuaWRcclxuICAgICAgfSwgcmVxLmJvZHkpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuZW5kKCk7XHJcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgZGVsZXRlUG9zaXRpb24ocmVxLCByZXMpIHtcclxuICAgICAgUG9zaXRpb24ucmVtb3ZlKHtcclxuICAgICAgICBfaWQ6IHJlcS5wYXJhbXMuaWRcclxuICAgICAgfSwgcmVxLmJvZHkpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuZW5kKCk7XHJcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgYWxsUG9zaXRpb25zKHJlcSwgcmVzKSB7XHJcbiAgICAgIFBvc2l0aW9uLmZpbmQoKS5leGVjKCkudGhlbigocG9zaXRpb25zKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHBvc2l0aW9ucyk7XHJcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

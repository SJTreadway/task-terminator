'use strict';

var mongoose = require('mongoose');
var Employee = require('../models/Employee.js');
var Company = require('../models/Company');
var Department = require('../models/Department.js');
var Position = require('../models/Position.js');

module.exports = {
  newEmployee: function newEmployee(req, res) {
    console.log("POST - ADD EMPLOYEE ENDPOINT", req.body);
    var newEmployee = new Employee(req.body);
    Company.findOne({
      _id: req.params.companyid
    }).exec().then(function (result) {
      console.log(result);
      result.employees.push(newEmployee._id);
      result.save();
    });
    Department.findOne({
      _id: req.params.departmentid
    }).exec().then(function (result) {
      console.log(result);
      result.employees.push(newEmployee._id);
      result.save();
    });
    Position.findOne({
      _id: req.params.positionid
    }).exec().then(function (result) {
      console.log(result);
      result.employees.push(newEmployee._id);
      result.save();
    });
    newEmployee.company = req.params.companyid;
    newEmployee.departments = req.params.departmentid;
    newEmployee.positions = req.params.positionid;
    newEmployee.identification.name.fullName = req.body.identification.name.firstName + " " + req.body.identification.name.lastName;
    newEmployee.save().then(function (result) {
      return res.json(result);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  oneEmployee: function oneEmployee(req, res) {
    console.log("GET - EMPLOYEE ID: ", req.params.id);
    Employee.findById(req.params.id).exec().then(function (employee) {
      return res.json(employee);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  editEmployee: function editEmployee(req, res) {
    console.log("EDIT - EMPLOYEE ID: ", req.params.id);
    Employee.update({
      _id: req.params.id
    }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  deleteEmployee: function deleteEmployee(req, res) {
    console.log("DELETE - EMPLOYEE ID: ", req.params.id);
    Employee.remove({
      _id: req.params.id
    }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },

  // allEmployees(req, res) {
  //   console.log('GET - ALL EMPLOYEES ENDPOINT');
  //   Company
  //     .findOne({
  //       _id: req.params.companyid
  //     })
  //     .populate('employees')
  //     .exec(function(err, company) {
  //       console.log('COMPANY FOUND:', company);
  //       Employee.populate 
  //     }
  //   }

  allEmployees: function allEmployees(req, res) {
    console.log('GET - ALL EMPLOYEES ENDPOINT');

    var options = {
      path: 'employees',
      model: 'Employee',
      populate: [{
        path: 'departments',
        model: 'Department',
        select: 'name'
      }, {
        path: 'positions',
        model: 'Position',
        select: 'name'
      }]
    };
    console.log('options for populate', options);
    console.log();
    Company.findOne({
      _id: req.params.companyid
    }).select('employees').populate(options).exec().then(function (company) {
      res.status(200).json(company.employees);
    }).catch(function (e) {
      console.log("MONGOOSE ERROR >>>", e.message);
      res.status(500).json(e);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,

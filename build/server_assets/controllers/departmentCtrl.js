'use strict';

var mongoose = require('mongoose');
var Department = require('../models/Department.js');
var Company = require('../models/Company.js');

module.exports = {
  newDepartment: function newDepartment(req, res) {
    console.log("POST - ADD DEPARTMENT ENDPOINT", req.body);
    var newDepartment = new Department(req.body);
    console.log("COMPANY ID", req.params.companyid);
    Company.findOne({
      _id: req.params.companyid
    }).exec().then(function (result) {
      console.log(result);
      result.departments.push(newDepartment._id);
      result.save();
      // console.log(result);
    });
    newDepartment.save().then(function (result) {
      return res.json(result);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  oneDepartment: function oneDepartment(req, res) {
    console.log("GET - DEPARTMENT ID: ", req.params.id);
    Department.findById(req.params.id).exec().then(function (department) {
      return res.json(department);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  editDepartment: function editDepartment(req, res) {
    console.log("PUT - EDIT DEPARTMENT ID: ", req.params.id);
    Department.update({ _id: req.params.id }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  deleteDepartment: function deleteDepartment(req, res) {
    console.log('DELETE - DEPARTMENT ID: ', req.params.id);
    Department.remove({ _id: req.params.id }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  allDepartments: function allDepartments(req, res) {
    console.log('GET - ALL DEPARTMENTS ENDPOINT');
    Department.find().exec().then(function (departments) {
      return res.json(departments);
    }).catch(function (err) {
      console.log(err);
      return res.status(500).end();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlcl9hc3NldHMvY29udHJvbGxlcnMvZGVwYXJ0bWVudEN0cmwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLFdBQVcsUUFBUSxVQUFSLENBQVg7QUFDTixJQUFNLGFBQWEsUUFBUSx5QkFBUixDQUFiO0FBQ04sSUFBTSxVQUFVLFFBQVEsc0JBQVIsQ0FBVjs7QUFFTixPQUFPLE9BQVAsR0FBaUI7QUFFZix3Q0FBYyxLQUFLLEtBQUs7QUFDdEIsWUFBUSxHQUFSLENBQVksZ0NBQVosRUFBOEMsSUFBSSxJQUFKLENBQTlDLENBRHNCO0FBRXRCLFFBQU0sZ0JBQWdCLElBQUksVUFBSixDQUFlLElBQUksSUFBSixDQUEvQixDQUZnQjtBQUd0QixZQUFRLEdBQVIsQ0FBWSxZQUFaLEVBQTBCLElBQUksTUFBSixDQUFXLFNBQVgsQ0FBMUIsQ0FIc0I7QUFJdEIsWUFDTyxPQURQLENBQ2U7QUFDUCxXQUFLLElBQUksTUFBSixDQUFXLFNBQVg7S0FGYixFQUlPLElBSlAsR0FLTyxJQUxQLENBS1ksVUFBUyxNQUFULEVBQWlCO0FBQ3JCLGNBQVEsR0FBUixDQUFZLE1BQVosRUFEcUI7QUFFckIsYUFBTyxXQUFQLENBQW1CLElBQW5CLENBQXdCLGNBQWMsR0FBZCxDQUF4QixDQUZxQjtBQUdyQixhQUFPLElBQVA7O0FBSHFCLEtBQWpCLENBTFosQ0FKc0I7QUFldEIsa0JBQWMsSUFBZCxHQUFxQixJQUFyQixDQUEwQixVQUFDLE1BQUQsRUFBWTtBQUNwQyxhQUFPLElBQUksSUFBSixDQUFTLE1BQVQsQ0FBUCxDQURvQztLQUFaLENBQTFCLENBRUcsS0FGSCxDQUVTLFVBQUMsR0FBRCxFQUFTO0FBQ2hCLGFBQU8sSUFBSSxNQUFKLENBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFQLENBRGdCO0tBQVQsQ0FGVCxDQWZzQjtHQUZUO0FBd0JmLHdDQUFjLEtBQUksS0FBSztBQUNyQixZQUFRLEdBQVIsQ0FBWSx1QkFBWixFQUFxQyxJQUFJLE1BQUosQ0FBVyxFQUFYLENBQXJDLENBRHFCO0FBRXJCLGVBQVcsUUFBWCxDQUFvQixJQUFJLE1BQUosQ0FBVyxFQUFYLENBQXBCLENBQW1DLElBQW5DLEdBQTBDLElBQTFDLENBQStDLFVBQUMsVUFBRCxFQUFnQjtBQUM3RCxhQUFPLElBQUksSUFBSixDQUFTLFVBQVQsQ0FBUCxDQUQ2RDtLQUFoQixDQUEvQyxDQUVHLEtBRkgsQ0FFUyxVQUFDLEdBQUQsRUFBUztBQUNoQixhQUFPLElBQUksTUFBSixDQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBUCxDQURnQjtLQUFULENBRlQsQ0FGcUI7R0F4QlI7QUFpQ2YsMENBQWUsS0FBSSxLQUFLO0FBQ3RCLFlBQVEsR0FBUixDQUFZLDRCQUFaLEVBQTBDLElBQUksTUFBSixDQUFXLEVBQVgsQ0FBMUMsQ0FEc0I7QUFFdEIsZUFBVyxNQUFYLENBQWtCLEVBQUMsS0FBSyxJQUFJLE1BQUosQ0FBVyxFQUFYLEVBQXhCLEVBQXdDLElBQUksSUFBSixDQUF4QyxDQUFrRCxJQUFsRCxDQUF1RCxZQUFNO0FBQzNELGFBQU8sSUFBSSxNQUFKLENBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFQLENBRDJEO0tBQU4sQ0FBdkQsQ0FFRyxLQUZILENBRVMsVUFBQyxHQUFELEVBQVM7QUFDaEIsYUFBTyxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQVAsQ0FEZ0I7S0FBVCxDQUZULENBRnNCO0dBakNUO0FBMENmLDhDQUFpQixLQUFJLEtBQUs7QUFDeEIsWUFBUSxHQUFSLENBQVksMEJBQVosRUFBd0MsSUFBSSxNQUFKLENBQVcsRUFBWCxDQUF4QyxDQUR3QjtBQUV4QixlQUFXLE1BQVgsQ0FBa0IsRUFBQyxLQUFLLElBQUksTUFBSixDQUFXLEVBQVgsRUFBeEIsRUFBd0MsSUFBSSxJQUFKLENBQXhDLENBQWtELElBQWxELENBQXVELFlBQU07QUFDM0QsYUFBTyxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQVAsQ0FEMkQ7S0FBTixDQUF2RCxDQUVHLEtBRkgsQ0FFUyxVQUFDLEdBQUQsRUFBUztBQUNoQixhQUFPLElBQUksTUFBSixDQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBUCxDQURnQjtLQUFULENBRlQsQ0FGd0I7R0ExQ1g7QUFtRGYsMENBQWUsS0FBSyxLQUFLO0FBQ3ZCLFlBQVEsR0FBUixDQUFZLGdDQUFaLEVBRHVCO0FBRXZCLGVBQVcsSUFBWCxHQUFrQixJQUFsQixHQUF5QixJQUF6QixDQUE4QixVQUFDLFdBQUQsRUFBaUI7QUFDN0MsYUFBTyxJQUFJLElBQUosQ0FBUyxXQUFULENBQVAsQ0FENkM7S0FBakIsQ0FBOUIsQ0FFRyxLQUZILENBRVMsVUFBQyxHQUFELEVBQVM7QUFDaEIsY0FBUSxHQUFSLENBQVksR0FBWixFQURnQjtBQUVoQixhQUFPLElBQUksTUFBSixDQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBUCxDQUZnQjtLQUFULENBRlQsQ0FGdUI7R0FuRFY7Q0FBakIiLCJmaWxlIjoic2VydmVyX2Fzc2V0cy9jb250cm9sbGVycy9kZXBhcnRtZW50Q3RybC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuY29uc3QgRGVwYXJ0bWVudCA9IHJlcXVpcmUoJy4uL21vZGVscy9EZXBhcnRtZW50LmpzJyk7XHJcbmNvbnN0IENvbXBhbnkgPSByZXF1aXJlKCcuLi9tb2RlbHMvQ29tcGFueS5qcycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblxyXG4gIG5ld0RlcGFydG1lbnQocmVxLCByZXMpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiUE9TVCAtIEFERCBERVBBUlRNRU5UIEVORFBPSU5UXCIsIHJlcS5ib2R5KTtcclxuICAgIGNvbnN0IG5ld0RlcGFydG1lbnQgPSBuZXcgRGVwYXJ0bWVudChyZXEuYm9keSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIkNPTVBBTlkgSURcIiwgcmVxLnBhcmFtcy5jb21wYW55aWQpO1xyXG4gICAgQ29tcGFueVxyXG4gICAgICAgICAgLmZpbmRPbmUoe1xyXG4gICAgICAgICAgICBfaWQ6IHJlcS5wYXJhbXMuY29tcGFueWlkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmV4ZWMoKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kZXBhcnRtZW50cy5wdXNoKG5ld0RlcGFydG1lbnQuX2lkKTtcclxuICAgICAgICAgICAgcmVzdWx0LnNhdmUoKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzdWx0KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgbmV3RGVwYXJ0bWVudC5zYXZlKCkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgIHJldHVybiByZXMuanNvbihyZXN1bHQpO1xyXG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgb25lRGVwYXJ0bWVudChyZXEscmVzKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkdFVCAtIERFUEFSVE1FTlQgSUQ6IFwiLCByZXEucGFyYW1zLmlkKTtcclxuICAgIERlcGFydG1lbnQuZmluZEJ5SWQocmVxLnBhcmFtcy5pZCkuZXhlYygpLnRoZW4oKGRlcGFydG1lbnQpID0+IHtcclxuICAgICAgcmV0dXJuIHJlcy5qc29uKGRlcGFydG1lbnQpO1xyXG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgZWRpdERlcGFydG1lbnQocmVxLHJlcykge1xyXG4gICAgY29uc29sZS5sb2coXCJQVVQgLSBFRElUIERFUEFSVE1FTlQgSUQ6IFwiLCByZXEucGFyYW1zLmlkKTtcclxuICAgIERlcGFydG1lbnQudXBkYXRlKHtfaWQ6IHJlcS5wYXJhbXMuaWR9LCByZXEuYm9keSkudGhlbigoKSA9PiB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuZW5kKCk7XHJcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG5cclxuICBkZWxldGVEZXBhcnRtZW50KHJlcSxyZXMpIHtcclxuICAgIGNvbnNvbGUubG9nKCdERUxFVEUgLSBERVBBUlRNRU5UIElEOiAnLCByZXEucGFyYW1zLmlkKTtcclxuICAgIERlcGFydG1lbnQucmVtb3ZlKHtfaWQ6IHJlcS5wYXJhbXMuaWR9LCByZXEuYm9keSkudGhlbigoKSA9PiB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuZW5kKCk7XHJcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG5cclxuICBhbGxEZXBhcnRtZW50cyhyZXEsIHJlcykge1xyXG4gICAgY29uc29sZS5sb2coJ0dFVCAtIEFMTCBERVBBUlRNRU5UUyBFTkRQT0lOVCcpO1xyXG4gICAgRGVwYXJ0bWVudC5maW5kKCkuZXhlYygpLnRoZW4oKGRlcGFydG1lbnRzKSA9PiB7XHJcbiAgICAgIHJldHVybiByZXMuanNvbihkZXBhcnRtZW50cyk7XHJcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
